/* This file is automatically generated by cbindgen from hyperlight_guest_capi/build.rs.
   Do not modify.*/

#ifndef HYPERLIGHT_GUEST_H
#define HYPERLIGHT_GUEST_H

#include "stdint.h"
#include "stdbool.h"
#include "macro.h"
#define LOG(level, message) hl_log(level, message, __LINE__, __FILE__)
#define _alloca _alloca_wrapper

typedef enum {
  hl_ErrorCode_NoError = 0,
  hl_ErrorCode_UnsupportedParameterType = 2,
  hl_ErrorCode_GuestFunctionNameNotProvided = 3,
  hl_ErrorCode_GuestFunctionNotFound = 4,
  hl_ErrorCode_GuestFunctionIncorrecNoOfParameters = 5,
  hl_ErrorCode_GispatchFunctionPointerNotSet = 6,
  hl_ErrorCode_OutbError = 7,
  hl_ErrorCode_UnknownError = 8,
  hl_ErrorCode_StackOverflow = 9,
  hl_ErrorCode_GsCheckFailed = 10,
  hl_ErrorCode_TooManyGuestFunctions = 11,
  hl_ErrorCode_FailureInDlmalloc = 12,
  hl_ErrorCode_MallocFailed = 13,
  hl_ErrorCode_GuestFunctionParameterTypeMismatch = 14,
  hl_ErrorCode_GuestError = 15,
  hl_ErrorCode_ArrayLengthParamIsMissing = 16,
} hl_ErrorCode;

enum hl_Level {
  hl_Level_Error = 1,
  hl_Level_Warn,
  hl_Level_Info,
  hl_Level_Debug,
  hl_Level_Trace,
};
typedef uintptr_t hl_Level;

typedef enum {
  hl_ParameterType_Int,
  hl_ParameterType_UInt,
  hl_ParameterType_Long,
  hl_ParameterType_ULong,
  hl_ParameterType_Float,
  hl_ParameterType_Double,
  hl_ParameterType_String,
  hl_ParameterType_Bool,
  hl_ParameterType_VecBytes,
} hl_ParameterType;

typedef enum {
  hl_ReturnType_Int,
  hl_ReturnType_UInt,
  hl_ReturnType_Long,
  hl_ReturnType_ULong,
  hl_ReturnType_Float,
  hl_ReturnType_Double,
  hl_ReturnType_String,
  hl_ReturnType_Bool,
  hl_ReturnType_Void,
  hl_ReturnType_VecBytes,
} hl_ReturnType;

typedef struct {
  uint8_t *data;
  uintptr_t len;
} hl_Vec;

typedef union {
  int32_t Int;
  uint32_t UInt;
  int64_t Long;
  uint64_t ULong;
  float Float;
  double Double;
  bool Bool;
  char *String;
  hl_Vec VecBytes;
} hl_ParameterValue;

typedef struct {
  hl_ParameterType tag;
  hl_ParameterValue value;
} hl_Parameter;

typedef struct {
  const char *function_name;
  const hl_Parameter *parameters;
  uintptr_t parameters_len;
  hl_ReturnType return_type;
} hl_FunctionCall;

typedef hl_Vec *(*hl_CGuestFunc)(const hl_FunctionCall*);

extern hl_Vec *c_guest_dispatch_function(const hl_FunctionCall *function_call);

void hl_register_function_definition(const char *function_name,
                                     hl_CGuestFunc func_ptr,
                                     uintptr_t param_no,
                                     const hl_ParameterType *params_type,
                                     hl_ReturnType return_type);

void hl_call_host_function(const hl_FunctionCall *function_call);

void hl_set_error(hl_ErrorCode err, const char *message);

void hl_abort_with_code(int32_t err);

void hl_abort_with_code_and_message(int32_t err, const char *message);

hl_Vec *hl_flatbuffer_result_from_Int(int32_t value);

hl_Vec *hl_flatbuffer_result_from_UInt(uint32_t value);

hl_Vec *hl_flatbuffer_result_from_Long(int64_t value);

hl_Vec *hl_flatbuffer_result_from_ULong(uint64_t value);

hl_Vec *hl_flatbuffer_result_from_Float(float value);

hl_Vec *hl_flatbuffer_result_from_Double(double value);

hl_Vec *hl_flatbuffer_result_from_Void(void);

hl_Vec *hl_flatbuffer_result_from_String(const char *value);

hl_Vec *hl_flatbuffer_result_from_Bytes(const uint8_t *data, uintptr_t len);

int32_t hl_get_host_return_value_as_Int(void);

uint32_t hl_get_host_return_value_as_UInt(void);

int64_t hl_get_host_return_value_as_Long(void);

uint64_t hl_get_host_return_value_as_ULong(void);

void hl_log(hl_Level level, const char *message, int32_t line, const char *file);

void abort(void);

extern void hyperlight_main(void);

extern void srand(uint32_t seed);

extern uint8_t *_alloca_wrapper(uintptr_t size);

void *hlmalloc(uintptr_t size);

void *hlcalloc(uintptr_t n, uintptr_t size);

void hlfree(void *ptr);

void *hlrealloc(void *ptr, uintptr_t size);

void _putchar(char c);

uint64_t setjmp(uint64_t x);

void longjmp(uint64_t x, uint64_t y);

#endif  /* HYPERLIGHT_GUEST_H */
